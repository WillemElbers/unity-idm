[[endp-oauth-as]]
=== OAuth 2 Authorization Server and OpenId Connect endpoints

Endpoint 1 type:: +OAuth2Authz+
Binding :: Web (Vaadin)
Exposed paths:: +/oauth2-authz+

Endpoint 2 type:: +OAuth2Token+
Binding:: RESTful (CXF)
Exposed paths:: +/token+, +/userinfo+, +/jwk+, +/tokeninfo+, +.well-known/openid-configuration+


The OAuth 2 endpoints expose a functionality of a generic Authorization Server with a support for the OpenID
Connect specification. The _code_, _implicit_, _client credentials_ and _hybrid_ flows are supported.    

The functionality is provided by two Unity endpoints, which shouldn't be mixed with endpoints in OAuth sense 
which are equivalent to particular paths exposed by Unity endpoints. The first Unity endpoint, +OAuth2Authz+,
exposes the OAuth authorization endpoint functionality. It is a web endpoint. It is used by end-users and 
the authentication of this endpoint should be configured so that OAuth users can authenticate themselves.

The second Unity endpoint, +OAuth2Token+, supports all remaining OAuth endpoints, including the most important 
token endpoint. The authentication settings of this endpoint should allow for authenticating OAuth clients accessing
the +/token+ path as required by OAuth specification. Note however that some of the operations needs to 
be authorized/authenticated by providing an OAuth access token only and this fact is handled internally - 
nothing has to be configured. Also two of the paths require neither 
authentication nor access token: +/jwk+ and +.well-known/openid-configuration+. This is also handled automatically. 

==== Configuration

Both OAuth endpoints create a pair, both must use the same configuration file. Configuration example:

----
unity.oauth2.as.issuerUri=https://example.com:2443/oauth2-token
unity.oauth2.as.signingCredential=MAIN

unity.oauth2.as.clientsGroup=/oauth-clients
unity.oauth2.as.usersGroup=/oauth-users
unity.oauth2.as.translationProfile=oauthOutputProfile

unity.oauth2.as.scopes.1.name=scope1
unity.oauth2.as.scopes.1.description=Provides access to base info
unity.oauth2.as.scopes.1.attributes.1=cn
unity.oauth2.as.scopes.1.attributes.2=o
unity.oauth2.as.scopes.1.attributes.3=email
---- 
 
The issuer should be equal to the base URL of the OAuth token endpoint in order to be compatible with OpenID Connect 
Discovery specification. 

OAuth clients are configured as regular Unity entities. To make an ordinary entity an OAuth client one must 
place it in the configured OAuth clients groups (+/oauth-clients+ in the above example). Additionally the
client:

 - must have a credential so it can authenticate at the token endpoint in the way it was configured,
 - must possess the +sys:oauth:allowedGrantFlows+ attribute (in OAuth clients group) with allowed flows,
 - must possess the +sys:oauth:allowedReturnURI+ attribute (in OAuth clients group) with allowed return URI,
 - can have logo and/or displayed name OAuth attributes assigned to improve client's presentation during user's consent.
 
OAuth users must belong to a group specified in the configuration file. If no restrictions are required the '/' group
can be used. In case that there are different groups of users for different OAuth clients, those groups can be 
configured with client's attribute +sys:oauth:groupForClient+.  
 
OAuth scopes should be defined next. Each scope includes a list of Unity attributes (use the Unity name) that should be
exposed when the client asks for the scope and the user gives her consent. 

Finally an output translation profile can be configured. It is highly useful to map Unity's internal attribute names 
to names used by OAauth consumers. Standard OAuth/OIDC attribute names can be found in the OIDC specification: 
http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims

Note that currently Unity requires you to configure all profiles and assign attributes to them manually.

The options for both endpoints (besides the standard options for all Web endpoints) are:

include::ref-oauthASProperties.txt[]

==== OpenID Connect

Unity supports OpenID Connect (OIDC) protocol nearly out of the box. The only requirement to enable OIDC 
is to define a scope with a special name +openid+. Typically the +openid+ scope has no attributes assigned. 

Clients requesting the +openid+ scope trigger OpenID Connect compatibility mode. In this mode the OIDC _id token_ 
is generated and returned in the implicit grant from the authorization endpoint or in the
code grant from the token endpoint.  
    
==== Usage

Unity as Authorization Server usage is mostly regulated with the OAuth or OIDC specifications. In short the client
redirects the user's browser to the authorization endpoint. There user should accept the client's request and 
Unity redirects the user back to the client. Depending on the flow used, the client receives an OAuth _access token_
immediately (the _implicit_ or _hybrid_ flows) or has to ask Unity's token endpoint about it (the _code_ flow). 
The _access token_ is then used by the client to access resources owned by the user. 

At this point the OAuth specification doesn't specify how the access token presented to a resource server can be
validated. This missing step of the specification results from a common use case when a Resource Server and 
Authorization Server are the same. With Unity this is not the case so the Resource Server needs to contact Unity to 
verify if the received _access token_ is genuine and valid.

To validate an _access token_ a client (any, not necessarily the 'OAuth client') has to send a GET request to 
+/tokeninfo+ path at the OAuth token endpoint. 

'''

+@Path("/tokeninfo")+ +
+@Authorization("Bearer access token")+ +
+@GET+ +

Returns status of a given access token, which must be provided in the Authorization header according to 
the RFC 6750). If the token is invalid then the HTTP 401 error is returned (see RFC 6750, section 3.1). If the token
is valid then the following JSON document is returned:  

----
{
  "sub": "subject id",
  "client_id": "client id",
  "exp": "12345678",
  "scope": ["scope1", "scope2"]
}
----

[NOTE]
This Unity endpoint can be also used to issue an access token which subsequently can be used as a simple credential
(mostly suitable for RESTful clients) to access Unity. Such approach is similar to the use of the JWT authentication
and <<endp-rest-jwt>>. The differences are that the Unity's JWT tokens can be obtained in a much
easier way then an OAuth access token. On the other hand JWT tokens can be used only with Unity, 
other services will neither issue nor validate them.
 
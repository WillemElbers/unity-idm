[[endp-rest-admin]]
=== RESTful Administration API endpoint

Endpoint type:: +RESTAdmin+
Binding:: RESTful (CXF)
Exposed paths:: +/v1/*+

This endpoint exposes a RESTful API to Unity features. 
The endpoint does not require any specialized configuration.

All paths must be naturally prefixed with the 
server's base URL, endpoint deployment's path (as configured) and API version (currently there is only one).
Example query path can be similar to:

   https://unity.example.com/rest-admin/v1/entity/1

==== API reference

'''

+@Path("/resolve/{identityType}/{identityValue}")+ +
+@GET+ +

Resolves a provided identity of a given type. The returned information is the same as in case of the +/entity+ 
operation.

Example output: 
----
{
  "id" : 3,
  "state" : "valid",
  "identities" : [ {
    "typeId" : "userName",
    "value" : "tested",
    "target" : null,
    "realm" : null,
    "local" : true,
    "entityId" : 3,
    "comparableValue" : "tested"
  }, {
    "typeId" : "persistent",
    "value" : "129ffe63-63b9-4467-ae24-6bc889327b0d",
    "target" : null,
    "realm" : null,
    "local" : true,
    "entityId" : 3,
    "comparableValue" : "129ffe63-63b9-4467-ae24-6bc889327b0d"
  } ],
  "credentialInfo" : {
    "credentialRequirementId" : "cr-pass",
    "credentialsState" : {
      "credential1" : {
        "state" : "notSet",
        "extraInformation" : ""
      }
    }
  }
}
----

'''

+@Path("/entity/{entityId}")+ +
+@GET+ +

Returns information about a given entity, including its status and all identities.

Example output: 
----
{
  "id" : 3,
  "state" : "valid",
  "identities" : [ {
    "typeId" : "userName",
    "value" : "tested",
    "target" : null,
    "realm" : null,
    "local" : true,
    "entityId" : 3,
    "comparableValue" : "tested"
  }, {
    "typeId" : "persistent",
    "value" : "129ffe63-63b9-4467-ae24-6bc889327b0d",
    "target" : null,
    "realm" : null,
    "local" : true,
    "entityId" : 3,
    "comparableValue" : "129ffe63-63b9-4467-ae24-6bc889327b0d"
  } ],
  "credentialInfo" : {
    "credentialRequirementId" : "cr-pass",
    "credentialsState" : {
      "credential1" : {
        "state" : "notSet",
        "extraInformation" : ""
      }
    }
  }
}
----

'''
	
+@Path("/entity/{entityId}/groups")+ +
+@GET+ +
 Returns all groups the entity is member of.

Example output: 
----
["/example/sub","/example","/"]
----


'''

+@Path("/entity/{entityId}/attributes")+ +
+@QueryParam("group")+ +
+@QueryParam("effective")+ +
+@GET+ +

Returns attributes of a given entity in a selected group. Values are encoded using simple mapping if possible
(e.g. String attribute is placed as JSON string), values with syntax which is not directly mappable to JSON type
is converted to binary representation and then Base64 encoded. The optional effective query parameter (by default true)
can be used to control whether only directly defined or effective attributes are queried.

Example output: 
----
[ {
  "values" : [ "/9j/4AAQSk .... KKKKACiiigD//2Q==" ],
  "direct" : true,
  "name" : "jpegA",
  "groupPath" : "/example",
  "visibility" : "full",
  "syntax" : "jpegImage"
}, {
  "values" : [ "value" ],
  "direct" : true,
  "name" : "stringA",
  "groupPath" : "/example",
  "visibility" : "full",
  "syntax" : "string"
} ]
----


'''

+@Path("/group/{groupPath}")+ +
+@GET+ +

Returns all members and subgroups of a given group.

Example output: 
----
{
  "subGroups" : [ ],
  "members" : [ 3 ]
}
----

'''

+@Path("/group/{groupPath}")+ +
+@POST+ +

Creates a new group. The created group will be empty.


'''

+@Path("/group/{groupPath}")+ +
+@QueryParam("recursive")+ +
+@DELETE+ +

Removes a given group. The optional +recursive+ query parameter can be used to 
enforce recursive removal (off by default).



'''

+@Path("/entity/identity/{type}/{value}")+ +
+@QueryParam("credentialRequirement")+ +
+@POST+ +	

Creates a new entity, with the given initial identity and credential requirement. The new entity is 
in valid state. New entity id is returned.

Example output: 
----
{"entityId":3}
----

'''

+@Path("/entity/{entityId}/identity/{type}/{value}")+ +
+@POST+ +

Creates a new identity for the given entity. No content is returned. Note that for e-mail identities the regular Unity
conventions can be used to control confirmation state and tags - see <<email-encoding>>.

'''

+@Path("/entity/{entityId}")+ +
+@DELETE+ +

Removes the given entity. No content is returned.

'''

+@Path("/entity/{entityId}/removal-schedule")+ +
+@QueryParam("when")+
+@PUT+ +

Sets the entity in the state where it can only login and schedules its removal at given 
time unless the user logs in before this time. No content is returned. This operation is 
allowed to be called on self .

'''

+@Path("/entity/{entityId}/admin-schedule")+ +
+@QueryParam("when")+
+@QueryParam("operation")+
+@PUT+ +

Schedules an operation to be invoked at a given time on an entity. Must be called by privileged user. Allowed
operations are: +REMOVE+ and +DISABLE+.

'''

+@Path("/entity/identity/{type}/{value}")+ +
+@DELETE+ +

Removes the given identity. No content is returned.

'''

+@Path("/group/{groupPath}/entity/{entityId}")+ +
+@POST+ +

Adds the given entity as a member to a group. Note that group must be URL encoded, the +/+ character should be 
given as +%2F+. No content is returned. 

'''

+@Path("/group/{groupPath}/entity/{entityId}")+ +
+@DELETE+ +

Removes a given entity from a group. Note that group must be URL encoded, the +/+ character should be 
given as +%2F+. No content is returned.

'''

+@Path("/entity/{entityId}/attribute")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Sets (creates or updates) an attribute for the given entity. The body of the PUT request describes the attribute:
its name, values and group. Its syntax is the same as returned by the GET attributes operation, however the +syntax+ 
and +direct+ shall not be used. No content is returned. Example attribute encoded (email with two values):

----
{
  "values" : [ {
    "value" : "some@example.com",
    "confirmationData" : "{\"confirmed\":false,\"confirmationDate\":0,\"sentRequestAmount\":0}"
  }, {
    "value" : "some2@example.com",
    "confirmationData" : "{\"confirmed\":true,\"confirmationDate\":1429006209143,\"sentRequestAmount\":0}"
  } ],
  "name" : "emailA",
  "groupPath" : "/",
  "visibility" : "full"
}
----

'''

+@Path("/entity/{entityId}/attributes")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Bulk attributes creation or update for a given entity. The body of the PUT request describes the attributes. Its root
level element must be JSON array. Elements of the array are attributes expressed in the same way as in the singular
set attribute operation.

'''

+@Path("/entity/{entityId}/attribute/{attributeName}")+ +
+@QueryParam("group")+ +
+@DELETE+ +

Removes the given attribute of an entity. No content is returned. 

'''

+@Path("/entity/{entityId}/credential-adm/{credential}")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Sets a new credential secret for the given entity. The caller must have administrative privileges. 
Credential name is given as the path parameter, while the secret 
is carried in the JSON body. No content is returned. For the password credential the complete value could be
(with a selected security question and its answer):  

----
{"password":"newpass","answer":"Some answer","question":1}
----

'''

+@Path("/entity/{entityId}/credential/{credential}")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Sets a new credential secret for the given entity. The caller is assumed to change his/her own credential and 
must provide its current value (assuming the credential was already set).  
Credential name is given as the path parameter, while the new and current secrets are carried in the JSON body. 
No content is returned. The body must be a JSON array with one (only when the credential was not yet set) 
or (typically) two elements. IMPORTANT: the values of the array must be JSON strings, not JSON objects.  

For the password credential the complete value could be (with a selected security question and its answer):  

----
[ 
  "{\"password\":\"newpass\",\"answer\":\"Some answer2\",\"question\":0}", 
  "{\"password\":\"currentpass\",\"answer\":\"Some answer\",\"question\":1}" 
]
----

'''

+@Path("/attributeTypes")+ +
+@GET+ +

Returns an array with all attribute types. Example:

----
[{
  "flags" : 0,
  "maxElements" : 1,
  "minElements" : 0,
  "selfModificable" : false,
  "uniqueValues" : false,
  "visibility" : "full",
  "syntaxState" : "{\"allowed\":[\"V2\",\"V1\"]}",
  "displayedName" : {
    "DefaultValue" : "enumA",
    "Map" : { }
  },
  "i18nDescription" : {
    "DefaultValue" : null,
    "Map" : { }
  },
  "metadata" : { },
  "name" : "enumA",
  "syntaxId" : "enumeration"
},
...
]
----


'''

+@Path("/attributeType")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Creates a new attribute type. The POSTed request body must contain a JSON description of the attribute type, 
with the same syntax as returned by the GET query on attributeTypes. Only a single element is permitted, i.e. do
not pass an JSON array. The +flags+ field should be always set to 0.


'''

+@Path("/attributeType")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates an existing attribute type. The syntax rules are as for POST, however the name of the updated attribute
type must resolve to an existing attribute type.


'''

+@Path("/attributeType/{toRemove}")+ +
+@QueryParam("withInstances")+ +
+@DELETE+ +

Removes a given attribute type. Query parameter +withInstances+ is used to control whether all attributes of the
removed type should be removed too (value +true+) or whether the operation should fail if there are any attributes
(value +false+).


'''

+@Path("/confirmation-trigger/identity/{type}/{value}")+ +
+@POST+ +

Triggers sending of confirmation message of identity. Nearly always it is a re-send.


'''

+@Path("/confirmation-trigger/entity/{entityId}/attribute/{attributeName}")+ +
+@QueryParam("group")+ +
+@POST+ +

Triggers sending of confirmation message for an attribute. Nearly always it is a re-send.


'''

+@Path("/endpoints")+ +
+@GET+ +

Returns all deployed endpoints. Example response with a single endpoint:

----
[{
  "id":"restAdmin",
  "displayedName": {
    "DefaultValue":"restAdmin",
    "Map":{}
  },
  "contextAddress":"/restadm",
  "description":"description",
  "realm": {
    "name":"authnRealm",
    "description":"",
    "blockAfterUnsuccessfulLogins":10,
    "blockFor":100,
    "allowForRememberMeDays":-1,
    "maxInactivity":600
  },
  "type": {
    "name":"RESTAdmin",
    "description":"A RESTful endpoint exposing Unity management API.",
    "supportedBindings":["jaxrs2"],
    "paths":{
      "/v1":"The REST management base path"}
    },
  "authenticatorSets": [{
    "primaryAuthenticator":"ApassREST"
  }]
}]
----
	

'''

+@Path("/endpoint/{id}")+ +
+@DELETE+ +

Undeploys a deployed endpoint. 


'''

+@Path("/endpoint/{id}")+ +
+@QueryParam("typeId")+ + 
+@QueryParam("address")+ + 
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Instantiates a new endpoint with a given configuration. Type and context path are specified as query parameters. The 
overall configuration is given in JSON document sent in the request body. Example:

----
{
  "displayedName" : {
    "DefaultValue" : "endpointName",
    "Map" : { }
  },
  "description" : "endpoint description",
  "authenticationOptions" : [ {
    "primaryAuthenticator" : "ApassREST"
  } ],
  "configuration" : "here comes endpoint configuration, typically in Java properties format",
  "realm" : "authnRealm"
}
----  


'''

+@Path("/endpoint/{id}")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates the given endpoint's configuration. The configuration is provided in request body (see POST method for example).
If some of the elements are missing, then existing values remain unchanged.


'''

+@Path("/registrationForms")+ +
+@GET+ +

Returns a JSON array with registration forms defined in the system. The syntax is complex
and is not provided here.


'''

+@Path("/registrationForm/{formId}")+ +
+@QueryParam("dropRequests")+ +
+@DELETE+ +

Removes registration form with the given id. An optional query parameter +dropRequests+ can be 
provided with a boolean value, to control whether the form should be removed also if it
has pending requests (the requests will be removed with the form).  


'''
	
+@Path("/registrationForm")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Creates a new registration form specified by the JSON object passed as request body.
The form description is quite complex. The easiest way is to create a registration form using the AdminUI
and then check the resulting JSON (GET on +/registrationForms+).


'''

+@Path("/registrationForm")+ +
+@QueryParam("ignoreRequests")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates an existing registration form. The body of the request should include 
a JSON description of a form, as during form creation. The only difference is
that this method expects existing form id. 
The optional boolean +ignoreRequests+ query parameter can be used to force form
update even if it has attached pending requests. Beware, however, that those
requests can easily become invalid.
 

'''

+@Path("/invitations")+ +
+@GET+ +

Returns a JSON array with all existing invitations.


'''

+@Path("/invitation/{code}")+ +
+@GET+ +

Returns a JSON encoded invitation with the specified code.


'''

+@Path("invitation/{code}")+ +
+@DELETE+ +

Removes an invitation with a specified code.


'''

+@Path("invitation/{code}/send")+ +
+@POST+ +

Triggers sending a message with an invitation. The registration form of the invitation
must have an invitation template defined, and the invitation must have contact address and channel
set.


'''

+@Path("invitation")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +
+@Produces(MediaType.TEXT_PLAIN)+ +

Creates a new invitation. Returned string is the unique code of the newly created invitation.
Example invitation definition:

----
{
  "formId" : "exForm",
  "expiration" : 1454703788,
  "contactAddress" : "someAddr@example.com",
  "channelId" : "channelId",
  "identities" : {},
  "groupSelections" : {},
  "attributes" : {}
}
---- 

Syntax of prefilled parameters, can be seen in the result of retrieving an AdminUI defined invitation
via the REST GET methods.


'''

+@Path("bulkProcessing/instant")+ +
+@QueryParam("timeout")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +
+@Produces(MediaType.TEXT_PLAIN)+ +

Schedules a rule for immediate processing. The optional query param +timeout+ controls whether the method should return
immediately after scheduling (no parameter) or after completing (parameter set). In the latter case parameter 
must specify the maximum wait time in seconds. Returned string is the status of scheduling (not the result of the action).
Possible statuses are: +sync+ (rule execution was completed in synchronous mode), +async+ (rule was submitted) 
or +timeout+ (rule was submitted in the synchronous mode but completion await time has passed).

Example rule definition:

----
{
  "condition" : "(idsByType contains 'userName') && (idsByType['userName'] contains 'user-to-remove')",
  "actionName" : "removeEntity",
  "params" : [ ]
}
---- 


[[endpoints]]
== Consumer access: the endpoints

Endpoints make Unity features accessible to the outside world. There are several endpoint 
implementations (or types) and each of them can be deployed multiple times under different addresses
with different settings. Such a deployed and configured endpoint type is simply called _endpoint_ or
_endpoint instance_.

Each endpoint supports a _binding_. Binding defines an access mechanism (e.g. SOAP Web Service or 
Web browser interface) and a technology in which it is programmed. Endpoints with the same binding
share some basic configuration options.

Endpoints are configured in the main configuration file. An example endpoint definition:

----
unityServer.core.endpoints.1.endpointType=WebAdminUI
unityServer.core.endpoints.1.endpointName=UNITY administration interface
unityServer.core.endpoints.1.contextPath=/admin
unityServer.core.endpoints.1.endpointConfigurationFile=conf/webadmin.json
unityServer.core.endpoints.1.endpointAuthenticators=oauthWeb;simplePwdWeb,certWeb
----

The endpoint instance configuration must specify the endpoint type (in the example it is +WebAdminUI+), one 
of the available ones. Each available endpoint has a separate subsection later on, which provide its 
type name. The endpoint instance must be named (any string) - the name is displayed in various user interfaces.

Endpoint context path defines the first element of a server relative address of an endpoint. E.g. for the
above context path +/admin+ all URLs of the endpoint instance will start with the URL 
+pass:[https://unity-hostname:unity-port/admin/...]+.

Endpoint configuration file is used to specify endpoint type-specific configuration, including the 
binding specific settings.

The final configuration element of all endpoints is the configuration of authenticators. Endpoint
can have many _alternative_ authenticators enabled. Names of those authenticators must be separated with semicolon. 
Additionally an endpoint may require simultaneous authentication using two authenticators 
(MFA - multi-factor authentication). In such case the two required authenticators must be enumerated with 
a comma as a separator. In the above example the endpoint allows for choosing between 
two authentication methods: one will use a single authenticator +oauthWeb+ and another alternative 
will require simultaneous authentication using +certWeb+ and +simplePwdWeb+.

=== Common options for endpoints
 
As it was mentioned there are options which are common for all endpoints with the same binding.
Those options are presented here, the endpoint sections later on do not contain them.  
 
For the REST endpoints the common options are:
include::ref-restEndpointProperties.txt[]

Options reference for all Web (Vaadin) endpoints are as follows:

include::ref-vaadinEndpointProperties.txt[]

Currently there are no common options for Web Serice endpoints.

[[endpoints-authn]]
=== Configuration of web authentication screen 

Web endpoints (besides settings relevant for the particular type of the endpoint, what is covered below) share a
number of common settings. Those settings control:

 - what (if any) registration possibilities are enabled for the endpoint
 - custom theme and web resources location for the endpoint (see <<branding>> for details)
 - how to arrange authentication options on the authentication screen

The last point constitutes the majority of the configuration options. In principle the authentication options
(provided by authenticators configured for the endpoint) can be arranged in one or more *authentication tiles*. 
Authentication tile is a visual grouping of authentication options. Each tile can be configured differently.
The following screenshot shows an authentication screen with two tiles:

image::./figures/authntiles.png[alt="Authentication tiles",align="center",scaledwidth="50%"]


The first tile is using the default +simple+ mode where icons (or names if icons are not defined) of authentication
options are arranged in configurable number of columns. The second tile is using the +table+ mode. The table mode
provides a more compact (and less flexible) presentation of authentication options but is perfect in cases when 
the number of options is high. On the screenshot part of the EduGain federation is presented with ca 1000 IdPs.  

More advanced customization of the authentication screen look can be performed with custom theming, see <<branding>>. 

Configuration of the above example follows:

----
unity.endpoint.web.authnsPerLine=2
unity.endpoint.web.authnIconScale=maxHeightSmall
unity.endpoint.web.authenticationTiles.1.tileContents=pwd cert ldap
unity.endpoint.web.authenticationTiles.1.tileMode=simple
unity.endpoint.web.authenticationTiles.1.tileName.pl=Lokalne metody
unity.endpoint.web.authenticationTiles.1.tileName.en=Local authentication
unity.endpoint.web.authenticationTiles.1.tileIconSize=maxHeight50

unity.endpoint.web.authenticationTiles.2.tileContents=saml oauth
unity.endpoint.web.authenticationTiles.2.tileMode=table
unity.endpoint.web.authenticationTiles.2.tileName.pl=Zdalne logowanie
unity.endpoint.web.authenticationTiles.2.tileName.en=Remote methods
----





include::endpoint-admin.txt[]

include::endpoint-home.txt[]

include::endpoint-saml.txt[]

include::endpoint-oauth.txt[]

include::endpoint-jwt.txt[]

include::endpoint-restadmin.txt[]

include::endpoint-wellknown.txt[]





